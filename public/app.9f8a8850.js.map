{"version":3,"sources":["js/player.js","js/helperFunctions.js","js/game.js","js/app.js"],"names":["Player","name","purse","_classCallCheck","currentBet","cards","folded","seatNumber","_createClass","key","value","amount","type","console","log","concat","_default","exports","default","pipe","_len","arguments","length","funcs","Array","_key","reduce","res","fn","knuthShuffle","arrayToShuffle","j","temp","array","from","i","Math","floor","random","circularIncrement","arrayLength","increment","startIndex","undefined","error","modulo","abs","Object","defineProperty","_player","_interopRequireDefault","require","_helperFunctions","obj","__esModule","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","_unsupportedIterableToArray","F","s","n","done","e","_e","f","TypeError","normalCompletion","err","didErr","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","test","arr","len","arr2","_typeof","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","_toPropertyKey","protoProps","staticProps","t","_toPrimitive","String","r","toPrimitive","Number","Game","players","hands","player","push","newDeck","shuffled","cardValues","deck","_i","_suits","_step","suit","_iterator","card","deckToDeal","playersArray","deal","cardDeck","pop","dealPreFlop","_ref","_communityCards$cards","arrayOfPlayers","_ref$communityCards","communityCards","some","forEach","dealFlop","_ref2","_communityCards$cards2","_ref2$communityCards","dealTurn","_ref3","_communityCards$cards3","_ref3$communityCards","dealRiver","_ref4","_communityCards$cards4","_ref4$communityCards","JSON","stringify","anteUp","arrOfPlayers","dealerIndex","blinds","bigBlind","smallBlind","pot","numberOfPlayers","bigBlindPlayerIndex","smallBlindPlayerIndex","placeBet","makeBettingRound","round","totalMoves","currentRoundMoves","currentHighestBet","acc","cur","currentDeficit","bet","fold","spinTimer","_game","window","onload","setTimeout","document","getElementById","remove","spin","element","querySelector","setInterval","style","offsetRotate","clearInterval"],"mappings":"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","file":"app.9f8a8850.js","sourceRoot":"../src","sourcesContent":["\nclass Player {\n    /**\n     * A player of the game.\n     *\n     * @param {string} name          - The name of this player\n     * @param {number} purse         - How much money this player has to bet with\n     * @param {number} currentBet    - The amount this player has thrown into the current pot\n     * @param {Array.<Object>} cards - The cards held by this player\n     * @param {bool} folded          - Whether this player has already folded\n     * @param {integer} seatNumber   - The position this player has around the table\n     * \n     * @class Player\n     */\n    constructor(name, purse) {\n        this.name = name;\n        this.purse = purse || 100;\n        this.currentBet = 0;\n        this.cards = [];\n        this.folded = false;\n        this.seatNumber = null\n    }\n\n    /**\n     * Decreases the purse and increases the current bet\n     *\n     * @param {number} amount - The amount being bet\n     * @param {string} type   - The type of bet, can be a `call`, `raise`,\n     *                          `small blind` or `big blind`\n     * @return {*} \n     * @memberof Player\n     */\n    placeBet(amount,type) {\n\n        console.log(`${this.name} is placing a ${type || 'bet'} of ${amount}`)\n        \n        this.purse -= amount\n        this.currentBet += amount\n        \n        return this\n    }\n\n    /**\n     * Sets fold to true for this player\n     *\n     * @return {*} \n     * @memberof Player\n     */\n    fold() {\n        console.log(`${this.name} is folding`)\n        this.folded = true\n\n        return this\n    }\n}\n\nexport default Player","\n\n/**\n * Pipes an input through a series of functions. Make\n * sure that types and expected arguments match to the\n * return values of preceding functions.\n *\n * @param {functions} funcs - A list of functions to be applied to the\n *                            input\n * @return {*} \n */\nconst pipe = (...funcs) => {\n    return (value) => {\n      return funcs.reduce((res, fn) => fn(res), value);\n    };\n  };\n\n\n/**\n * Takes an array of values and shufles the entries\n * to get a random sort\n *\n * @param {array} arrayToShuffle - The array you would like to mix up\n * @return {array} a copy of the original array\n */\nconst knuthShuffle = (arrayToShuffle) => {\n    const array = Array.from(arrayToShuffle)\n    for (let i = array.length -1, j, temp; i > 0; i--) {\n        j = Math.floor(Math.random()*(i+1));\n        temp = array[j];\n        array[j] = array[i];\n        array[i] = temp;\n    }\n    return array\n} \n\n\n/**\n * Takes an array length, a starting point and a distance and gives\n * back an index that will, if the distance from the start index exceeds\n * the length of the array, loop back and start counting from position 0.\n *\n * @param {integer} arrayLength    - The length of the array you want to use\n * @param {integer} increment      - The distance from the starting index\n * @param {integer} [startIndex=0] - The index to start counting from\n * @return {integer} the index\n * \n * @example \n * const arr = [0,1,2,3,4]\n * arr.length === 5          // true\n * \n * circularIncrement(5,1)    // 1\n * circularIncrement(5,3,3)  // 1\n * circularIncrement(5,-3,4) // 1\n * \n */\nconst circularIncrement = (arrayLength,increment,startIndex = 0) => {\n    //console.log('length',arrayLength,'increment',increment,'start',startIndex);\n    \n    if (arrayLength === 0 || startIndex > arrayLength) {\n        //console.log('fail 1')\n        console.error('circular index start point is out of the array')\n        return -1\n    }\n    if (arrayLength === 1) {\n        //console.log('condition 1')\n        return 0\n    }\n    if (increment + startIndex < 0) {\n        //console.log('foo')\n        // length: 4, inc: - 1, start: 0  = 3\n        const modulo = startIndex + increment % arrayLength\n        \n        //console.log(Math.abs(modulo));\n        return modulo === 0 ? startIndex : arrayLength - Math.abs(modulo)\n    }\n    if (startIndex + increment < arrayLength) {\n        //console.log('condition 2');\n        return startIndex + increment\n    }\n    //console.log('condition 3');\n    const modulo = (startIndex + 1 + increment ) % (arrayLength)\n    //console.log(modulo);\n    return modulo === 0 ? startIndex : modulo - 1\n  }\n\n  export {circularIncrement, knuthShuffle, pipe}","\"use strict;\"\n\nimport Player from './player.js';\nimport {pipe, knuthShuffle, circularIncrement} from './helperFunctions.js'\n\n\n\nclass Game {\n    /**\n     * a class\n     * \n     * @param {array}  players  - An array of players, see Player class\n     * @param {number} hands    - The current hand since the game was started\n     * @param {number} round    - The current round in this hand. A round is counted\n     *                            after every player has made a move. Rounds start\n     *                            counting from 1, a round of 0 indicates that the\n     *                            hand has not started and new players can potentially\n     *                            enter the game\n     * @param {number} pot      - The amount currently in the pot and available to win\n     *                            in this hand \n     *\n     * @class Game\n     */\n    constructor() {\n      this.players = [];\n      this.hands = [];\n\n    }\n  \n    /**\n     * Add a player to the current game\n     *\n     * @param {object} player A player object\n     * @memberof Game\n     */\n    addPlayer(player) {\n      this.players.push(player)\n      this.players[this.players.length - 1].seatNumber = this.players.length\n    }\n    startNewHand() {\n      \n    }\n  }\n\n\n\n  const newDeck = (shuffled = true, aceHigh = true) => {\n    const suits = ['spades','diamonds','clubs','hearts']\n    const cardValues = [2,3,4,5,6,7,8,9,10,11,12,13,aceHigh ? 14 : 1]\n    let deck = [];\n    for (const suit of suits) {\n        for (const card of cardValues) {\n            deck.push({suit,card})\n        }\n    }\n    return shuffled ? knuthShuffle(deck) : deck\n  }\n\n\n//#region some stuff to test that shuffle is random\n//   const arrayOfRandos = () => {\n//     let cardStack = []\n//     for (let i = 1000000;i > 0; i--) {\n//         const card = newDeck()[0]\n//         cardDef = Object.values(card).join('')\n//         cardStack.push(cardDef)\n//     }\n//     return cardStack.sort((a,b) => a.localeCompare(b))\n//   }\n\n//   const testCards = arrayOfRandos()\n\n//   const frequency = testCards.reduce((acc,cur) => {\n//     acc[cur] ? acc[cur] += 1 : acc[cur] = 1;\n//     return acc\n//   },{})\n\n//   console.log(frequency)\n//\n//#endregion\n\n\n  let deckToDeal = newDeck()\n  let playersArray = [\n    new Player('foo',100),\n    new Player('bar',100),\n    new Player('baz',100),\n    new Player('jij',100),\n  ]\n\n  \n  \n  \n\n/**\n * TODO - make functional so we return a new deck and\n *        player instead of mutating, round deals are functional\n *        so not sure if needed\n *\n * @param {*} cardDeck\n * @param {*} player\n */\nconst deal = (cardDeck, player) => {\n    player.cards.push(cardDeck.pop())\n  }\n\n  const dealPreFlop = ({deck,arrayOfPlayers,communityCards = {}}) => {\n    if (\n        arrayOfPlayers.some(player => player.cards.length) || \n        communityCards?.cards?.length\n        ) {\n        console.error('can only deal pre-flop once')\n        return\n    }\n    for (let i = 2; i > 0; i--) {\n        arrayOfPlayers.forEach(player => deal(deck,player))\n    }\n    return {deck,arrayOfPlayers}\n  }\n\n  const dealFlop = ({deck,arrayOfPlayers,communityCards = {}}) => {\n    if (\n        arrayOfPlayers.some(player => player.cards.length !== 2) || \n        communityCards?.cards?.length\n        ) {\n        console.error('can only deal the flop once, after players have cards')\n        return\n    }\n    const burnedCard = deck.pop()\n    communityCards.cards = []\n    for (let i = 3; i > 0; i--) {\n        deal(deck,communityCards)\n    }\n    \n    return {deck,arrayOfPlayers,communityCards}\n  }\n\n  const dealTurn = ({deck, arrayOfPlayers,communityCards = {}}) => {\n    if ( communityCards?.cards?.length !== 3) {\n        console.error(`can only deal the turn once, after the flop and before the river`)\n        return // it is better to always return something\n    }\n    const burnedCard = deck.pop()\n    deal(deck,communityCards)\n    return {deck,arrayOfPlayers,communityCards}\n  }\n   \n  const dealRiver = ({deck, arrayOfPlayers,communityCards = {}}) => {\n    if ( communityCards?.cards?.length !== 4 ) {\n        console.error(`can only deal the river once, after the flop and turn`)\n        return\n    }\n    const burnedCard = deck.pop()\n    deal(deck,communityCards)\n    return {deck,arrayOfPlayers,communityCards}\n  }\n\n    // console.log(dealPreFlop(deckToDeal,playersArray,[]))\n\n    // console.log(playersArray);\n\n    // dealPreFlop({deck:deckToDeal, arrayOfPlayers:playersArray})\n\n    // console.log(playersArray);\n\n    // dealFlop({deck: deckToDeal, arrayOfPlayers: playersArray})\n\n    // console.log(playersArray);\n\n    // dealTurn({deck: deckToDeal, arrayOfPlayers: playersArray})\n\n    // console.log(playersArray);\n\n    // dealRiver({deck: deckToDeal,arrayOfPlayers: playersArray})\n\n    // console.log(playersArray);\n\n\n    console.log(JSON.stringify(pipe(dealPreFlop, dealFlop, dealTurn, dealRiver)({deck:deckToDeal, arrayOfPlayers:playersArray}),null,4));\n\n//  dealPreFlop(deckToDeal,playersArray)\n//  console.log(playersArray)\n\n//  playersArray.find(player => player.player === 40)\n\n\n\n\n  //const testArray = ['a','b','c','d']\n\n  //circularIncrement(testArray.length,2,0)\n\n  //testArray[circularIncrement(testArray.length,5,0)]\n\n\n   //console.log(playersArray);\n\n\n  \n  const anteUp = (arrOfPlayers, dealerIndex = 0, blinds = {}) => {\n    const bigBlind = blinds.bigBlind || 4;\n    const smallBlind = blinds.smallBlind || 2;\n    let pot = 0;\n    const numberOfPlayers = arrOfPlayers.length\n\n    if (numberOfPlayers < 2) {\n        console.error('you don\\'t have enough players for a game')\n        return\n    }\n    \n    if (dealerIndex > numberOfPlayers -1) {\n        console.error('dealerIndex is more than the number of players')\n        return \n    }\n\n    const bigBlindPlayerIndex = circularIncrement(numberOfPlayers,1,dealerIndex)\n    const smallBlindPlayerIndex = circularIncrement(numberOfPlayers,2,dealerIndex)\n\n    { // handle big blind\n        arrOfPlayers[bigBlindPlayerIndex].placeBet(bigBlind,'big blind')\n        // this should be a method on the player\n        pot += bigBlind\n    }\n    { // handle small blind\n        arrOfPlayers[smallBlindPlayerIndex].placeBet(smallBlind, 'small blind')\n\n        pot += smallBlind\n    }\n\n    return {arrOfPlayers,dealerIndex,pot}\n  } \n\n  anteUp(playersArray)\n\n  /** start betting round, we should use fixed for a start and\n   *  not allow unlimited betting so we can fix the amounts that\n   *  a player can bet, this can be extended later if we can get\n   *  the logic right in the first place.\n   * \n   *  there are four rounds of betting: after the pre-flop has been \n   *  dealt, after the flop, after the turn and after the river. A \n   *  betting round will continue until all players have matched the \n   *  current bet, put up all their chips or folded.\n   * \n   *  in a betting round each player should have the opportunity\n   *  to call, check, raise or fold.\n   *  on a call: \n   */\n  const makeBettingRound = (arrOfPlayers,dealerIndex,pot = 0,communityCards = {}) => {\n    let round = 0\n    let totalMoves = 0;\n    let currentRoundMoves = 0;\n    let currentHighestBet = arrOfPlayers.reduce((acc,cur) => cur.currentBet > acc ? cur.currentBet : acc,0)\n\n    do {\n        totalMoves += currentRoundMoves;\n        currentRoundMoves = 0;\n        console.log('\\nmaking some moves in round',round);\n        // as a player makes a move that is not a check the \n        // current moves increases by one\n        // once every player has had the option to make a move\n        // and the move count does not increase in that round\n        // we can end the round\n        // we can move the number of moves from current round\n        // to moves variable and reset current round to 0 at\n        // start of round\n        \n        arrOfPlayers.forEach(player => {\n            \n            if (!player.folded && player.currentBet < currentHighestBet) {\n                console.log(player.name,' is chumpin->',player.currentBet,'highest',currentHighestBet,);\n                if ( Math.random() > 0.4 ) {\n                    const currentDeficit = currentHighestBet - player.currentBet\n                    const bet = Math.random() > 0.4 ? currentDeficit : 4\n                    \n                    bet === currentDeficit ? player.placeBet(bet,'call') :player.placeBet(4)\n                    \n                    pot += bet\n                    currentRoundMoves++\n                    if (player.currentBet > currentHighestBet) {\n                        currentHighestBet = player.currentBet\n                    } \n                } else  {\n                    player.fold()\n                }\n            }\n        })\n        console.log('round',round,'currentRoundMoves',currentRoundMoves,'totalMoves',totalMoves);\n        round++\n    }\n    while (\n        currentRoundMoves > 0 && round < 5\n    )\n    //console.log(playersArray);\n    console.log('round',round,'currentRoundMoves',currentRoundMoves,'totalMoves',totalMoves);\n    \n    return {playersArray, dealerIndex, pot, communityCards}\n  }\n\n  console.log(makeBettingRound(playersArray,0));\n\n  export default Game\n  ","import Game from \"./game\";\n\nwindow.onload = function(){\n    setTimeout(function(){\n    document.getElementById(\"fadein\").remove();\n  },1000);\n};\n\nlet spinTimer;\nlet spin = 0;\nconst element = document.querySelector('#motion-path-example-span')\n\nspinTimer = setInterval(() => {\n  if (spin === 360) {\n    spin = 0\n  }\n  element.style.offsetRotate = `${spin}deg`\n  spin++\n},10)\n\nsetTimeout(() => clearInterval(spinTimer),100000)\n\n"]}