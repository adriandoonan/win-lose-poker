{"version":3,"sources":["js/player.js","js/game.js","js/app.js"],"names":["Player","name","purse","_classCallCheck","currentBet","seatNumber","_createClass","key","value","amount","type","console","log","concat","folded","_default","exports","default","Object","defineProperty","_player","_interopRequireDefault","require","obj","__esModule","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","err","didErr","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","from","test","arr","len","arr2","_typeof","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","_toPropertyKey","protoProps","staticProps","t","_toPrimitive","String","r","toPrimitive","Number","pipe","_len","arguments","funcs","_key","reduce","res","fn","Game","players","hands","player","push","newDeck","shuffled","undefined","cardValues","deck","_i","_suits","_step","suit","_iterator","card","j","temp","Math","floor","random","deckToDeal","playersArray","jsonCopy","JSON","parse","stringify","structuredCopy","structuredClone","deal","cardDeck","cards","pop","dealPreFlop","_ref","_communityCards$cards","arrayOfPlayers","_ref$communityCards","communityCards","some","forEach","error","dealFlop","_ref2","_communityCards$cards2","_ref2$communityCards","dealTurn","_ref3","_communityCards$cards3","_ref3$communityCards","dealRiver","_ref4","_communityCards$cards4","_ref4$communityCards","circularIncrement","arrayLength","increment","startIndex","modulo","abs","testArray","anteUp","arrOfPlayers","dealerIndex","blinds","bigBlind","smallBlind","pot","numberOfPlayers","bigBlindPlayerIndex","smallBlindPlayerIndex","placeBet","makeBettingRound","round","totalMoves","currentRoundMoves","currentHighestBet","acc","cur","currentDeficit","bet","fold","spinTimer","_game","window","onload","setTimeout","document","getElementById","remove","spin","element","querySelector","setInterval","style","offsetRotate","clearInterval"],"mappings":"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","file":"app.6ecd739b.js","sourceRoot":"../src","sourcesContent":["\nclass Player {\n    /**\n     * A player of the game.\n     *\n     * @param {string} name     - The name of this player\n     * @param {number} purse    - How much money this player has to bet with\n     * @param {string} strategy - What kind of a player this is. This will\n     *                            define how a computer-controlled player\n     *                            responds in different situations \n     * \n     * @class Player\n     */\n    constructor(name, purse) {\n        this.name = name;\n        this.purse = purse || 100;\n        this.currentBet = 0;\n        this.seatNumber = null\n    }\n\n    placeBet(amount,type) {\n\n        console.log(`${this.name} is placing a ${type || 'bet'} of ${amount}`)\n        \n        this.purse -= amount\n        this.currentBet += amount\n        \n        return this\n    }\n    fold() {\n        console.log(`${this.name} is folding`)\n        this.folded = true\n\n        return this\n    }\n\n}\n\nexport default Player","\"use strict;\"\n\nimport Player from \"./player\";\n\nconst pipe = (...funcs) => {\n    return (value) => {\n      return funcs.reduce((res, fn) => fn(res), value);\n    };\n  };\n\nclass Game {\n    /**\n     * a class\n     * \n     * @param {array}  players - An array of players, see Player class\n     * @param {number} hands    - The current hand since the game was started\n     * @param {number} round   - The current round in this hand. A round is counted\n     *                           after every player has made a move. Rounds start\n     *                           counting from 1, a round of 0 indicates that the\n     *                           hand has not started and new players can potentially\n     *                           enter the game\n     * @param {number} pot     - The amount currently in the pot and available to win\n     *                           in this hand \n     *\n     * @class Game\n     */\n    constructor() {\n      this.players = [];\n      this.hands = [];\n\n    }\n  \n    /**\n     * Add a player to the current game\n     *\n     * @param {object} player A player object\n     * @memberof Game\n     */\n    addPlayer(player) {\n      this.players.push(player)\n    }\n  }\n\n\n\n  const newDeck = (shuffled = true, aceHigh = true) => {\n    const suits = ['spades','diamonds','clubs','hearts']\n    const cardValues = [2,3,4,5,6,7,8,9,10,11,12,13,aceHigh ? 14 : 1]\n    let deck = [];\n    for (const suit of suits) {\n        for (const card of cardValues) {\n            deck.push({suit,card})\n        }\n    }\n    if (shuffled) {\n        for (let i = deck.length -1, j, temp; i > 0; i--) {\n            j = Math.floor(Math.random()*(i+1));\n            temp = deck[j];\n            deck[j] = deck[i];\n            deck[i] = temp;\n        }\n    }\n    return deck\n  }\n\n\n//#region some stuff to test that shuffle is random\n//   const arrayOfRandos = () => {\n//     let cardStack = []\n//     for (let i = 1000000;i > 0; i--) {\n//         const card = newDeck()[0]\n//         cardDef = Object.values(card).join('')\n//         cardStack.push(cardDef)\n//     }\n//     return cardStack.sort((a,b) => a.localeCompare(b))\n//   }\n\n//   const testCards = arrayOfRandos()\n\n//   const frequency = testCards.reduce((acc,cur) => {\n//     acc[cur] ? acc[cur] += 1 : acc[cur] = 1;\n//     return acc\n//   },{})\n\n//   console.log(frequency)\n//\n//#endregion\n\n\n  let deckToDeal = newDeck()\n  let playersArray = [\n    new Player('foo',100),\n    new Player('bar',100),\n    new Player('baz',100),\n    new Player('jij',100),\n  ]\n\n  const jsonCopy = JSON.parse(JSON.stringify(playersArray))\n  const structuredCopy = structuredClone(playersArray)\n\n playersArray[0].constructor.name\n jsonCopy[0].constructor.name\n structuredCopy[0].constructor.name\n  \n  \n  \n\n/**\n * TODO - make functional so we return a new deck and\n *        player instead of mutating, round deals are functional\n *        so not sure if needed\n *\n * @param {*} cardDeck\n * @param {*} player\n */\nconst deal = (cardDeck, player) => {\n    player.cards.push(cardDeck.pop())\n  }\n\n  const dealPreFlop = ({deck,arrayOfPlayers,communityCards = {}}) => {\n    deck = JSON.parse(JSON.stringify(deck))\n    arrayOfPlayers = JSON.parse(JSON.stringify(arrayOfPlayers))\n    \n    if (\n            arrayOfPlayers.some(player => player.cards.length) || \n            communityCards?.cards?.length\n        ) {\n            console.error('can only deal pre-flop once')\n            return\n    }\n    for (let i = 2; i > 0; i--) {\n        arrayOfPlayers.forEach(player => deal(deck,player))\n    }\n    return {deck,arrayOfPlayers}\n  }\n\n  const dealFlop = ({deck,arrayOfPlayers,communityCards = {}}) => {\n    deck = JSON.parse(JSON.stringify(deck))\n    arrayOfPlayers = JSON.parse(JSON.stringify(arrayOfPlayers))\n    \n    if (\n            arrayOfPlayers.some(player => player.cards.length !== 2) || \n            communityCards?.cards?.length\n        ) {\n            console.error('can only deal the flop once, after players have cards')\n            return\n    }\n    const burnedCard = deck.pop()\n    communityCards.cards = []\n    for (i = 3; i > 0; i--) {\n        deal(deck,communityCards)\n    }\n    \n    return {deck,arrayOfPlayers,communityCards}\n  }\n\n  const dealTurn = ({deck, arrayOfPlayers,communityCards = {}}) => {\n    deck = JSON.parse(JSON.stringify(deck))\n    arrayOfPlayers = JSON.parse(JSON.stringify(arrayOfPlayers))\n\n    if ( communityCards?.cards?.length !== 3) {\n        console.error(`can only deal the turn once, after the flop and before the river`)\n        return // it is better to always return something\n    }\n    const burnedCard = deck.pop()\n    deal(deck,communityCards)\n    return {deck,arrayOfPlayers,communityCards}\n  }\n   \n  const dealRiver = ({deck, arrayOfPlayers,communityCards = {}}) => {\n    deck = JSON.parse(JSON.stringify(deck))\n    arrayOfPlayers = JSON.parse(JSON.stringify(arrayOfPlayers))\n    \n    if ( communityCards?.cards?.length !== 4 ) {\n        console.error(`can only deal the river once, after the flop and turn`)\n        return\n    }\n    const burnedCard = deck.pop()\n    deal(deck,communityCards)\n    return {deck,arrayOfPlayers,communityCards}\n  }\n\n//   console.log(dealPreFlop(deckToDeal,playersArray,[]))\n\n//   console.log(playersArray);\n\n     //dealPreFlop({deck:deckToDeal, arrayOfPlayers:playersArray})\n\n     //console.log(playersArray);\n\n    // dealFlop({deck: deckToDeal, arrayOfPlayers: playersArray})\n\n    // console.log(playersArray);\n\n    // dealTurn({deck: deckToDeal, arrayOfPlayers: playersArray})\n\n    // console.log(playersArray);\n\n    // dealRiver({deck: deckToDeal,arrayOfPlayers: playersArray})\n\n    // console.log(playersArray);\n\n\n    // console.log(JSON.stringify(pipe(dealPreFlop, dealFlop, dealTurn, dealRiver)({deck:deckToDeal, arrayOfPlayers:playersArray}),null,4));\n\n//  dealPreFlop(deckToDeal,playersArray)\n//  console.log(playersArray)\n\n//  playersArray.find(player => player.player === 40)\n\n\n  const circularIncrement = (arrayLength,increment,startIndex = 0) => {\n    //console.log('length',arrayLength,'increment',increment,'start',startIndex);\n    \n    if (arrayLength === 0 || startIndex > arrayLength) {\n        //console.log('fail 1')\n        console.error('circular index start point is out of the array')\n        return -1\n    }\n    if (arrayLength === 1) {\n        //console.log('condition 1')\n        return 0\n    }\n    if (increment + startIndex < 0) {\n        //console.log('foo')\n        // length: 4, inc: - 1, start: 0  = 3\n        const modulo = startIndex + increment % arrayLength\n        \n        //console.log(Math.abs(modulo));\n        return modulo === 0 ? startIndex : arrayLength - Math.abs(modulo)\n    }\n    if (startIndex + increment < arrayLength) {\n        //console.log('condition 2');\n        return startIndex + increment\n    }\n    //console.log('condition 3');\n    const modulo = (startIndex + 1 + increment ) % (arrayLength)\n    //console.log(modulo);\n    return modulo === 0 ? startIndex : modulo - 1\n\n  }\n\n  const testArray = ['a','b','c','d']\n\n  //circularIncrement(testArray.length,2,0)\n\n  testArray[circularIncrement(testArray.length,5,0)]\n\n\n   console.log(playersArray);\n\n\n  \n  const anteUp = (arrOfPlayers, dealerIndex = 0, blinds = {}) => {\n    const players = structuredClone(arrOfPlayers);\n    const bigBlind = blinds.bigBlind || 4;\n    const smallBlind = blinds.smallBlind || 2;\n    let pot = 0;\n    const numberOfPlayers = arrOfPlayers.length\n\n    if (numberOfPlayers < 2) {\n        console.error('you don\\'t have enough players for a game')\n        return\n    }\n    \n    if (dealerIndex > numberOfPlayers -1) {\n        console.error('dealerIndex is more than the number of players')\n        return \n    }\n\n    const bigBlindPlayerIndex = circularIncrement(numberOfPlayers,1,dealerIndex)\n    const smallBlindPlayerIndex = circularIncrement(numberOfPlayers,2,dealerIndex)\n\n    //if (players.length === 2) {\n        { // handle big blind\n            arrOfPlayers[bigBlindPlayerIndex].placeBet(bigBlind,'big blind')\n            // this should be a method on the player\n            pot += bigBlind\n        }\n        { // handle small blind\n            arrOfPlayers[smallBlindPlayerIndex].placeBet(smallBlind, 'small blind')\n\n            pot += smallBlind\n        }\n    //}\n\n\n    return {players,dealerIndex,pot}\n\n  } \n\n  anteUp(playersArray)\n\n  /** start betting round, we should use fixed for a start and\n   *  not allow unlimited betting so we can fix the amounts that\n   *  a player can bet, this can be extended later if we can get\n   *  the logic right in the first place.\n   * \n   *  there are four rounds of betting: after the pre-flop has been \n   *  dealt, after the flop, after the turn and after the river. A \n   *  betting round will continue until all players have matched the \n   *  current bet, put up all their chips or folded.\n   * \n   *  in a betting round each player should have the opportunity\n   *  to call, check, raise or fold.\n   *  on a call: \n   */\n  const makeBettingRound = (arrOfPlayers,dealerIndex,pot = 0,communityCards = {}) => {\n\n    \n    let round = 0\n    let totalMoves = 0;\n    let currentRoundMoves = 0;\n    let currentHighestBet = arrOfPlayers.reduce((acc,cur) => cur.currentBet > acc ? cur.currentBet : acc,0)\n\n    do {\n        totalMoves += currentRoundMoves;\n        currentRoundMoves = 0;\n        console.log('\\nmake some moves in round',round);\n        // as a player makes a move that is not a check the \n        // current moves increases by one\n        // once every player has had the option to make a move\n        // and the move count does not increase in that round\n        // we can end the round\n        // we can move the number of moves from current round\n        // to moves variable and reset current round to 0 at\n        // start of round\n        \n        arrOfPlayers.forEach(player => {\n            \n            \n            if (!player.folded && player.currentBet < currentHighestBet) {\n                console.log(player.name,' is chumpin->',player.currentBet,'highest',currentHighestBet,);\n                if ( Math.random() > 0.4 ) {\n                    const currentDeficit = currentHighestBet - player.currentBet\n                    const bet = Math.random() > 0.4 ? currentDeficit : 4\n                    \n                    bet === currentDeficit ? player.placeBet(bet,'call') :player.placeBet(4)\n                    \n                    pot += bet\n                    currentRoundMoves++\n                    if (player.currentBet > currentHighestBet) {\n                        currentHighestBet = player.currentBet\n                    } \n                } else  {\n                    player.fold()\n                }\n            }\n\n\n        })\n        console.log('moves',totalMoves,'currentRoundMoves',currentRoundMoves,'round',round);\n        round++\n    }\n    while (\n        currentRoundMoves > 0 && round < 5\n    )\n    //console.log(playersArray);\n    console.log('moves',totalMoves,'currentRoundMoves',currentRoundMoves,'round',round);\n    \n    return {playersArray, dealerIndex, pot, communityCards}\n  }\n\n  console.log(makeBettingRound(playersArray,0));\n\n  export default Game\n  ","import Game from \"./game\";\n\nwindow.onload = function(){\n    setTimeout(function(){\n    document.getElementById(\"fadein\").remove();\n  },1000);\n};\n\nlet spinTimer;\nlet spin = 0;\nconst element = document.querySelector('#motion-path-example-span')\n\nspinTimer = setInterval(() => {\n  if (spin === 360) {\n    spin = 0\n  }\n  element.style.offsetRotate = `${spin}deg`\n  spin++\n},10\n)\n\nsetTimeout(() => clearInterval(spinTimer),100000)\n\n"]}